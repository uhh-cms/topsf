[core]

# inherit from the columnflow configuration file
inherit: $CF_BASE/law.cfg


[modules]

columnflow.tasks.cms.inference
columnflow.tasks.cms.external
topsf.tasks.plotting
topsf.tasks.wp.efficiency
topsf.tasks.inference
topsf.tasks.inference_tasks.create_workspace
topsf.tasks.inference_tasks.combine_task
topsf.tasks.inference_tasks.postfitshapes
topsf.tasks.inference_tasks.impacts
topsf.tasks.inference_v2.workspace
topsf.tasks.inference_v2.gen_toys
topsf.tasks.inference_v2.multi_dim_fit
topsf.tasks.inference_v2.post_fit_shapes
topsf.tasks.inference_v2.impacts
topsf.tasks.inference_v2.plot_impacts
topsf.tasks.inference_v2.plot_shapes

[logging]

law: INFO
luigi-interface: INFO
gfal2: WARNING
columnflow.columnar_util-perf: INFO


[analysis]

default_analysis: topsf.config.run3.analysis_sf.analysis_sf
default_config: run3_sf_2022_postEE_nano_v12
default_dataset: tt_fh_powheg
run3_analysis: topsf.config.run3.analysis_sf.analysis_sf
run3_config: run3_sf_2022_preEE_nano_v12

default_keep_reduced_events: True

production_modules: columnflow.production.{categories,normalization,mc_weight,pileup,processes,seeds}, columnflow.production.cms.{btag,electron,mc_weight,muon,pdf,pileup,scale,seeds}, topsf.production.{default,gen_top}
calibration_modules: columnflow.calibration.cms.{jets,met}, topsf.calibration.{default,skip_jec}
selection_modules: columnflow.selection.cms.{json_filter,met_filters}, topsf.selection.{default,categories,jet,bjet,fatjet,lepton,wp}
ml_modules: columnflow.ml
inference_modules: columnflow.inference, topsf.inference.{default,uhh2}

# namespace of all columnflow tasks
cf_task_namespace: cf

# sandbox for working with combine tasks
combine_sandbox: bash::$TOPSF_BASE/sandboxes/combine_cmssw.sh

# wether or not the ensure_proxy decorator should be skipped, even if used by task's run methods
skip_ensure_proxy: False

# some remote workflow parameter defaults
htcondor_flavor: $CF_HTCONDOR_FLAVOR
htcondor_share_software: False
slurm_flavor: $CF_SLURM_FLAVOR
slurm_partition: $CF_SLURM_PARTITION

# ChunkedIOHandler defaults
chunked_io_chunk_size: 100000
chunked_io_pool_size: 2
chunked_io_debug: True

# csv list of task families that inherit from ChunkedReaderMixin and whose output arrays should be
# checked for non-finite values before saving them to disk (right now, supported tasks are
# cf.CalibrateEvents, cf.SelectEvents, cf.ProduceColumns, cf.PrepareMLEvents, cf.MLEvaluation,
# cf.UniteColumns)
# check_finite_output: cf.CalibrateEvents, cf.SelectEvents, cf.ProduceColumns
check_finite_output: None

# whether to log runtimes of array functions by default
log_array_function_runtime: False


[outputs]  

# list of all used file systems
wlcg_file_systems: wlcg_fs, wlcg_fs_infn_redirector, wlcg_fs_global_redirector

# list of file systems used by columnflow.tasks.external.GetDatasetLFNs.iter_nano_files to
# look for the correct fs per nano input file (in that order)
lfn_sources: local_desy_dcache, wlcg_fs_infn_redirector, wlcg_fs_global_redirector

# output locations per task family
# for local targets : "local[, LOCAL_FS_NAME or STORE_PATH]"
# for remote targets: "wlcg[, WLCG_FS_NAME]"
# (when WLCG_FS_NAME is empty, the tasks' "default_wlcg_fs" attribute is used)
cf.BundleRepo: local
cf.BundleSoftware: local
cf.BundleBashSandbox: local
cf.BundleCMSSWSandbox: local
cf.BundleExternalFiles: local
# GetDatasetLFNs requires a Grid certificate -> use a common space to store the output
cf.GetDatasetLFNs: local
cf.CalibrateEvents: wlcg
cf.SelectEvents: wlcg
cf.CreateCutflowHistograms: wlcg
cf.PlotCutflow: local
cf.PlotCutflowVariables: local
cf.ReduceEvents: wlcg
cf.MergeReducedEvents: wlcg
cf.ProduceColumns: wlcg
cf.PrepareMLEvents: wlcg
cf.MergeMLEvents: wlcg
cf.MLTraining: wlcg
cf.MLEvaluation: wlcg
cf.CreateHistograms: local
cf.MergeHistograms: local
cf.MergeShiftedHistograms: local
cf.PlotVariables1D: local
cf.PlotShiftedVariables: local
cf.CreateDatacards: local


[job]

job_file_dir: $CF_JOB_BASE
job_file_dir_cleanup: False


[local_fs]

base: /


[local_desy_dcache]

base: /pnfs/desy.de/cms/tier2


[wlcg_fs]

# set this to your desired location, e.g.:
# base: root://eosuser.cern.ch/eos/user/$CF_CERN_USER_FIRSTCHAR/$CF_CERN_USER/$CF_STORE_NAME
base: &::wlcg_fs_desy::base
create_file_dir: True
use_cache: $CF_WLCG_USE_CACHE
cache_root: $CF_WLCG_CACHE_ROOT
cache_cleanup: $CF_WLCG_CACHE_CLEANUP
cache_max_size: 50GB


[wlcg_fs_desy]

xrootd_base: root://dcache-cms-xrootd.desy.de:1094/pnfs/desy.de/cms/tier2/store/user/$CF_CERN_USER/$CF_STORE_NAME
gsiftp_base: gsiftp://dcache-door-cms04.desy.de:2811/pnfs/desy.de/cms/tier2/store/user/$CF_CERN_USER/$CF_STORE_NAME
base: &::xrootd_base

[wlcg_fs_infn_redirector]

base: root://xrootd-cms.infn.it/
use_cache: $CF_WLCG_USE_CACHE
cache_root: $CF_WLCG_CACHE_ROOT
cache_cleanup: $CF_WLCG_CACHE_CLEANUP
cache_max_size: 15GB
cache_global_lock: True
cache_mtime_patience: -1


[wlcg_fs_global_redirector]

base: root://cms-xrd-global.cern.ch/
use_cache: $CF_WLCG_USE_CACHE
cache_root: $CF_WLCG_CACHE_ROOT
cache_cleanup: $CF_WLCG_CACHE_CLEANUP
cache_max_size: 15GB
cache_global_lock: True
cache_mtime_patience: -1
